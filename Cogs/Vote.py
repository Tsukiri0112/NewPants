import json
import typing
import datetime
from discord.ext import commands


class Vote(commands.Cog):
    def __init__(self, bot: commands.bot):
        self.bot = bot
        print(__name__)
        self.end_button = 'üîö'

    async def add_reaction(self, message, item_count: int):
        # ÊäïÁ•®Áî®„Éú„Çø„É≥„ÇíËøΩÂä†
        emoji_list = ['1‚É£', '2‚É£', '3‚É£', '4‚É£',
                      '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']

        for i in range(item_count):
            await message.add_reaction(emoji_list[i])

        # ÈñãÁ•®Áî®„Éú„Çø„É≥„ÇíËøΩÂä†
        await message.add_reaction(self.end_button)

    def save_json(self, json_data):
        save_file = open('vote.json', 'w')
        json.dump(json_data, save_file)

    def load_json(self):
        f = open('vote.json', 'r')
        json_data = json.load(f)
        return json_data

    def make_json_data(self, message, channel_id, user, min):
        # ÊúÄÊñ∞„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        # ÈñãÁ•®ÊôÇÈñì„ÇíË®àÁÆó
        now = datetime.datetime.now()
        count_time = now + datetime.timedelta(minutes=min)
        # ÊôÇÈñì„ÇíÊñáÂ≠óÂàó„Å´Â§âÊèõ
        count_time_text = count_time.strftime('%Y%m%d_%H:%M')

        # Êó¢Â≠ò„ÅÆjson_data„Å´Êñ∞„Åó„ÅÑË¶ÅÁ¥†„ÇíËøΩÂä†
        json_data[message.id] = {
            "executor": user.id,
            "channel_id": channel_id,
            "count_time": count_time_text,
            "vote_user": {}
        }

        # json_data„ÅÆÂÜÖÂÆπ„ÅåÊñ∞„Åó„Åè„Å™„Å£„Åü„ÅÆ„Åß„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        self.save_json(json_data)

    async def aggregate(self, message_id):
        json_data = self.load_json
        channel_id = json_data[message_id]["channel_id"]
        channel = self.bot.get_channel(channel_id)
        vote_message = await channel.fetch_message(message_id)

        reactions = vote_message.reactions

        result = {}

        for r in reactions:
            result[r.emoji] = r.count

        return result

    @ commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        print('„É™„Ç¢„ÇØ„Ç∑„Éß„É≥ËøΩÂä†„Åï„Çå„Åü„Çà')
        print(reaction.emoji)
        # jsonË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        message_id = str(reaction.message.id)
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return

        vote_user = json_data[message_id]['vote_user']
        user_id = str(user.id)
        emoji = reaction.emoji

        # „Åô„Åß„Å´ÊäïÁ•®Ê∏à„Åø„Å†„Å£„ÅüÂ†¥Âêà„ÄÅ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çíremove
        if user_id in vote_user:
            await reaction.remove(user)
            return
        # ÊäïÁ•®Ââç„Å†„Å£„ÅüÂ†¥Âêà„ÄÅÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„Å´id„ÇíËøΩÂä†
        json_data[message_id]['vote_user'][user_id] = emoji

        # ÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÅÆ„Åßjson„ÇÇÊõ¥Êñ∞
        print(json_data)
        self.save_json(json_data)

    @ commands.Cog.listener()
    async def on_reaction_remove(self, reaction, user):
        print(user.name)
        # jsonË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        message_id = str(reaction.message.id)
        user_id = str(user.id)
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return

        vote_user = json_data[message_id]['vote_user']
        remove_data = (user_id, reaction.emoji)

        if remove_data not in vote_user.items():
            return

        # „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂ§ñ„Åó„Åü‰∫∫„ÅÆid„ÇíÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
        del vote_user[user_id]

        # ÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÅÆ„Åßjson„ÇÇÊõ¥Êñ∞
        json_data[message_id]['vote_user'] = vote_user
        self.save_json(json_data)

    @ commands.Cog.listener(name='on_reaction_add')
    async def press_end_button(self, reaction, user):
        Received_emoji = reaction.emoji
        # Êäº„Åï„Çå„Åü„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Ååend_button„Å®Âêå„Åò„ÅãÁ¢∫Ë™ç
        if Received_emoji != self.end_button:
            return

        json_data = self.load_json()
        message_id = str(reaction.message.id)
        user_id = str(user.id)
        executor = json_data[message_id]['executor']

        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return
        # executor„Å®„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Å§„Åë„Åü‰∫∫„ÅåÂêå„Åò„ÅãÁ¢∫Ë™ç
        elif user_id not in executor:
            return

        result = self.aggregate(reaction.message.id)

    @ commands.group(invoke_without_command=True)
    async def vote(self, ctx):
        await ctx.send('„Åù„ÅÆ„ÅÜ„Å°‰Ωø„ÅÑÊñπ„ÇíÂÆüË£Ö„Åô„Çã„Çà')

    @ vote.command()
    async def start(self, ctx, min: typing.Optional[int] = 30, *args):
        emoji_list = ['1‚É£', '2‚É£', '3‚É£', '4‚É£',
                      '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']
        if len(args) >= 11:
            await ctx.send('Â§ö„ÅÑ')
        elif len(args) <= 1:
            await ctx.send('Â∞ë„Å™„ÅÑ')

        text = '„Å®„ÅÜ„Å≤„Çá„Éº \n'

        i = 0

        for c in args:
            text += f'{emoji_list[i]} : {c}\n'
            i += 1

        message = await ctx.send(text)

        user = ctx.author
        channel_id = ctx.message.channel.id

        item_count = len(args)

        await self.add_reaction(message, item_count)

        self.make_json_data(message, channel_id, user, min)

    @ vote.command()
    async def result(self, ctx, vote_message_id: str):
        json_data = self.load_json
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if vote_message_id not in json_data:
            return

        result = self.aggregate(vote_message_id)

        await ctx.send(result)

    # @ commands.Cog.listener()
    # async def on_command_error(ctx, error):
    #     await ctx.send(error)


def setup(bot):
    bot.add_cog(Vote(bot))
