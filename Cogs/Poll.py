import json
import typing
import datetime
from discord.ext import commands


class Poll(commands.Cog):
    def __init__(self, bot: commands.bot):
        self.bot = bot
        print(__name__)
        self.end_button = 'üîö'

    async def add_reaction(self, message, item_count: int):
        # ÊäïÁ•®Áî®„Éú„Çø„É≥„ÇíËøΩÂä†
        emoji_list = ['1‚É£', '2‚É£', '3‚É£', '4‚É£',
                      '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']

        for i in range(item_count):
            await message.add_reaction(emoji_list[i])

        # ÈñãÁ•®Áî®„Éú„Çø„É≥„ÇíËøΩÂä†
        await message.add_reaction(self.end_button)

    def save_json(self, json_data):
        save_file = open('poll.json', 'w')
        json.dump(json_data, save_file)

    def load_json(self):
        f = open('poll.json', 'r')
        json_data = json.load(f)
        return json_data

    def make_json_data(self, message, channel_id, user, min, mode=0):
        # ÊúÄÊñ∞„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        # ÈñãÁ•®ÊôÇÈñì„ÇíË®àÁÆó
        now = datetime.datetime.now()
        count_time = now + datetime.timedelta(minutes=min)
        # ÊôÇÈñì„ÇíÊñáÂ≠óÂàó„Å´Â§âÊèõ
        count_time_text = count_time.strftime('%Y%m%d_%H:%M')

        # Êó¢Â≠ò„ÅÆjson_data„Å´Êñ∞„Åó„ÅÑË¶ÅÁ¥†„ÇíËøΩÂä†
        json_data[message.id] = {
            "executor": user.id,
            "channel_id": channel_id,
            "count_time": count_time_text,
            "mode": mode,
            "poll_user": {}
        }

        # json_data„ÅÆÂÜÖÂÆπ„ÅåÊñ∞„Åó„Åè„Å™„Å£„Åü„ÅÆ„Åß„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        self.save_json(json_data)

    async def aggregate(self, message_id):
        json_data = self.load_json()
        channel_id = json_data[message_id]['channel_id']
        channel = self.bot.get_channel(channel_id)
        poll_message = await channel.fetch_message(int(message_id))

        reactions = poll_message.reactions

        result = {}

        for r in reactions:
            result[r.emoji] = r.count

        return result

    async def get_message(self, channel_id, message_id):
        channel = self.bot.get_channel(channel_id)
        message = await channel.fetch_message(int(message_id))
        content = message.content

        return content

    @ commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        print('„É™„Ç¢„ÇØ„Ç∑„Éß„É≥ËøΩÂä†„Åï„Çå„Åü„Çà')
        print(reaction.emoji)
        Received_emoji = reaction.emoji
        # Êäº„Åï„Çå„Åü„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Ååend_button„Å®Âêå„Åò„Å†„Å£„ÅüÂ†¥ÂêàÂá¶ÁêÜÁµÇ‰∫Ü
        if Received_emoji == self.end_button:
            return
        # jsonË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        message_id = str(reaction.message.id)
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return

        poll_user = json_data[message_id]['poll_user']
        user_id = str(user.id)
        emoji = reaction.emoji
        mode = json_data[message_id]['mode']

        # „É¢„Éº„Éâ„Åå„Éû„É´„ÉÅ„Åß„ÅØ„Å™„Åã„Å£„ÅüÂ†¥ÂêàÊäïÁ•®Ê∏à„Åø„É¶„Éº„Ç∂„ÅãÁ¢∫Ë™ç
        if str(mode) != "1":
            # „Åô„Åß„Å´ÊäïÁ•®Ê∏à„Åø„Å†„Å£„ÅüÂ†¥Âêà„ÄÅ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çíremove
            if user_id in poll_user:
                await reaction.remove(user)
                return
        # ÊäïÁ•®Ââç„Å†„Å£„ÅüÂ†¥Âêà„ÄÅÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„Å´id„ÇíËøΩÂä†
        json_data[message_id]['poll_user'][user_id] = emoji

        # ÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÅÆ„Åßjson„ÇÇÊõ¥Êñ∞
        self.save_json(json_data)

    @ commands.Cog.listener()
    async def on_reaction_remove(self, reaction, user):
        # jsonË™≠„ÅøÂá∫„Åó
        json_data = self.load_json()

        message_id = str(reaction.message.id)
        user_id = str(user.id)
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return

        poll_user = json_data[message_id]['poll_user']
        remove_data = (user_id, reaction.emoji)

        if remove_data not in poll_user.items():
            return

        # „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂ§ñ„Åó„Åü‰∫∫„ÅÆid„ÇíÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
        del poll_user[user_id]

        # ÊäïÁ•®Ê∏à„Åø„É™„Çπ„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÅÆ„Åßjson„ÇÇÊõ¥Êñ∞
        json_data[message_id]['poll_user'] = poll_user
        self.save_json(json_data)

    @ commands.Cog.listener(name='on_reaction_add')
    async def press_end_button(self, reaction, user):
        # „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅåBot„Å†„Å£„Åü„Çâreturn
        if user.bot:
            return

        Received_emoji = reaction.emoji
        # Êäº„Åï„Çå„Åü„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Ååend_button„Å®Âêå„Åò„ÅãÁ¢∫Ë™ç
        if Received_emoji != self.end_button:
            return

        json_data = self.load_json()
        message_id = str(reaction.message.id)
        user_id = str(user.id)

        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if message_id not in json_data:
            return

        # ÂØæË±°„Ç¢„É≥„Ç±„Éº„Éà„ÅÆ‰ΩúÊàêËÄÖ„ÇíÂèñÂæó
        executor = json_data[message_id]['executor']

        # executor„Å®„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Å§„Åë„Åü‰∫∫„ÅåÂêå„Åò„Åò„ÇÉ„Å™„ÅÑÂ†¥ÂêàÂá¶ÁêÜÁµÇ‰∫Ü
        if str(user_id) != str(executor):
            return

        result = await self.aggregate(message_id)

        channel_id = json_data[message_id]["channel_id"]
        channel = self.bot.get_channel(channel_id)

        original_message = await self.get_message(channel_id, message_id)

        await channel.send(content=original_message)

        text = ''
        for k, v in result.items():
            if k != self.end_button:
                v = int(v) - 1
                text += f'{k} : {v}„ÄÄ'

        await channel.send(content=text)

    @ commands.group(invoke_without_command=True)
    async def poll(self, ctx):
        await ctx.send('!poll')

    @ poll.command()
    async def single(self, ctx, min: typing.Optional[int] = 30, question='„Åè„Åà„Åô„Å°„Çá„ÇìÔºü',  *items):  # noqa
        emoji_list = ['1‚É£', '2‚É£', '3‚É£', '4‚É£',
                      '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']
        if len(items) >= 11:
            await ctx.send('Â§ö„ÅÑ')
            return
        elif len(items) <= 1:
            await ctx.send('Â∞ë„Å™„ÅÑ')
            return

        text = question + '\n'

        i = 0

        for c in items:
            text += f'{emoji_list[i]} : {c}\n'
            i += 1

        message = await ctx.send(text)

        user = ctx.author
        channel_id = ctx.message.channel.id

        item_count = len(items)

        await self.add_reaction(message, item_count)

        self.make_json_data(message, channel_id, user, min)

    @ poll.command()
    async def multi(self, ctx, min: typing.Optional[int] = 30, question='„Åè„Åà„Åô„Å°„Çá„ÇìÔºü',  *items):  # noqa
        mode = 1
        emoji_list = ['1‚É£', '2‚É£', '3‚É£', '4‚É£',
                      '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']
        if len(items) >= 11:
            await ctx.send('Â§ö„ÅÑ')
            return
        elif len(items) <= 1:
            await ctx.send('Â∞ë„Å™„ÅÑ')
            return

        text = question + '\n'

        i = 0

        for c in items:
            text += f'{emoji_list[i]} : {c}\n'
            i += 1

        message = await ctx.send(text)

        user = ctx.author
        channel_id = ctx.message.channel.id

        item_count = len(items)

        await self.add_reaction(message, item_count)

        self.make_json_data(message, channel_id, user, min, mode)

    @ poll.command()
    async def result(self, ctx, poll_message_id: str):
        json_data = self.load_json
        # json_data„Å´„É°„ÉÉ„Çª„Éº„Ç∏ID„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if poll_message_id not in json_data:
            return

        result = self.aggregate(poll_message_id)

        await ctx.send(result)


def setup(bot):
    bot.add_cog(Poll(bot))
